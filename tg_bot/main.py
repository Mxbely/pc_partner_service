import asyncio
import json
import logging
import os
import sys
print("Hello, tg_bot!")

token = os.getenv("BOT_TOKEN", "default_token")
print(f"Using token: {token}")
print(f"Manager ID: {os.getenv('MANAGER_ID', 'not set')}")
if token == "default_token":
    print("Warning: Using default token, please set the BOT_TOKEN environment variable.")

from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

# Bot token can be obtained via https://t.me/BotFather
TOKEN = os.getenv("BOT_TOKEN")
MANAGER_ID = int(os.getenv("MANAGER_ID"))

# All handlers should be attached to the Router (or Dispatcher)

dp = Dispatcher()

main_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîπ –ö–Ω–æ–ø–∫–∞ 1", callback_data="btn_1")],
    [InlineKeyboardButton(text="üîπ –ö–Ω–æ–ø–∫–∞ 2", callback_data="btn_2")],
    [InlineKeyboardButton(text="üîπ –ö–Ω–æ–ø–∫–∞ 3", callback_data="btn_3")],
    [InlineKeyboardButton(text="üîπ –ö–Ω–æ–ø–∫–∞ 4", callback_data="btn_4")],
    [InlineKeyboardButton(text="üìû –ó º—î–¥–Ω–∞—Ç–∏ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="connect_manager")]
])

active_chats = {}  # {user_id: manager_id}
manager_chats = {} # {manager_id: user_id} ‚Äî –∑ –∫–∏–º –∑–∞—Ä–∞–∑ —Å–ø—ñ–ª–∫—É—î—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "–ó'—î–¥–Ω–∞—Ç–∏ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
connect_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó º—î–¥–Ω–∞—Ç–∏ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="connect_manager")]
        ]
    )

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç —Ç–∞ –≤–∏–±—Ä–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
def manager_keyboard(first_name: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data=f"end_chat:{first_name}")]
    ]
)

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        text=f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}! –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ üëá",
        reply_markup=main_menu_keyboard
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ä—Ç (–ø–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è)
# @dp.message(F.text == "/start")
# async def start_handler(message: Message):
#     await message.answer("–ü—Ä–∏–≤—ñ—Ç!\n–¶–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—å –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.", reply_markup=main_menu_keyboard)

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –∑'—î–¥–Ω–∞–Ω–Ω—è
@dp.callback_query(F.data == "connect_manager")
async def connect_to_manager(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if user_id in active_chats:
        await callback.answer("–í–∏ –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        return
    
    active_chats[user_id] = MANAGER_ID
    manager_chats[MANAGER_ID] = user_id  # –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ä–∞–∑ —Å–ø—ñ–ª–∫—É—î—Ç—å—Å—è –∑ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
    await bot.send_message(
        chat_id=MANAGER_ID,
        text=f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.first_name} (id: {callback.from_user.id}) —Ö–æ—á–µ –∑ º—î–¥–Ω–∞—Ç–∏—Å—å –∑ –≤–∞–º–∏.\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏.",
        reply_markup=manager_keyboard(callback.from_user.first_name)
    )
    await callback.message.answer("–í–∏ –∑'—î–¥–Ω–∞–Ω—ñ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –í—Å—ñ –≤–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—å –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    await callback.answer()

# –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
@dp.message(F.from_user.id == MANAGER_ID)
async def manager_message_handler(message: Message, bot: Bot):
    manager_id = message.from_user.id
    if manager_id not in manager_chats:
        await message.answer("–í–∏ –∑–∞—Ä–∞–∑ –Ω–µ —Å–ø—ñ–ª–∫—É—î—Ç–µ—Å—å –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
        return
    
    user_id = manager_chats[manager_id]
    try:
        await bot.send_message(user_id, f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {message.text}")
    except Exception as e:
        await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")


# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É
@dp.message()
async def user_message_handler(message: Message, bot: Bot):
    user_id = message.from_user.id
    if user_id not in active_chats:
        await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ó'—î–¥–Ω–∞—Ç–∏ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', —â–æ–± –ø–æ—á–∞—Ç–∏ —á–∞—Ç.", reply_markup=connect_keyboard)
        return
    
    manager_id = active_chats[user_id]
    user = message.from_user
    print(f"User {user_id} ({user.full_name}) sent a message: {message.text}")
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ó–∞–≤–µ—Ä—à–∏—Ç–∏"
    await bot.send_message(
        manager_id,
        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.full_name} (id: {user_id}):\n{message.text}",
        reply_markup=manager_keyboard(user.first_name)
    )

# –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"
@dp.callback_query(F.data.startswith("end_chat:"))
async def end_chat(callback: CallbackQuery, bot: Bot):
    print("Callback received:", callback)
    print("Start get text from callback message")
    text = callback.message.text.split("\n")[0]  # "end_chat:<user_id>"
    id = text.split(")")[0].split()[-1]  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–µ–∫—Å—Ç—É
    print("End get text from callback message")
    print("Callback id:", id)
    user_id = int(id)
    print("User ID from callback:", user_id)
    manager_id = callback.from_user.id
    
    if user_id in active_chats:
        del active_chats[user_id]
    if manager_id in manager_chats:
        del manager_chats[manager_id]
    
    await callback.message.answer("–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    await callback.answer()
    
    # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    try:
        await bot.send_message(user_id, "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–µ—Ä—à–∏–≤ –¥—ñ–∞–ª–æ–≥.")
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")



@dp.message()
async def echo_handler(message: Message) -> None:
    print("Message echo User:", message.from_user)
    print(type(message))

    """
    Handler will forward receive a message back to the sender

    By default, message handler will handle all message types (like a text, photo, sticker etc.)
    """
    try:
        # Send a copy of the received message
        # Or you can use `send_copy
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        # But not all the types is supported to be copied so need to handle it
        await message.answer("Nice try!")


async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
